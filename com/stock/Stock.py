# -*- coding: UTF-8 -*-
'''
    Created on 2017-12-20
    filename: Stock.py
    @author: MONKING
    
    内容描述:
    

    依赖包：
    sudo pip install BeautifulSoup
    
'''

import re,json,Utils
import pandas as pd
from bs4 import BeautifulSoup
from urllib2 import urlopen,Request

DAY_PRICE_COLS = ['date','open','high','close','low','volume','chg','%chg','ma5','ma10','ma20','vma5','vma10','vma20','turnover']
DAY_PRICE_URL = '%sapi.finance.%s/%s/?code=%s&type=last'
INDEX_KEY = ['SH','SZ','HS300','SZ50','GEB','SMEB']
INDEX_LIST = {'SH':'sh000001','SZ':'sz399001','HS300':'sz399300','SZ50':'sh000016','GEB':'sz399006','SMEB':'sz39905'}
INDEX_DAY_PRICE_COLS = ['date','open','high','close','low','volume','chg','%chg','ma5','ma10','ma20','vma5','vma10','vma20']
K_TYPE_KEY = ['D','W','M']
K_TYPE_MAIN_KEY = ['5','15','30','60']
K_TYPE = {'D':'akdaily','W':'akweekly','M':'akmonthly'}
MAIN_PRICE_URL = '%sapi.finance.%s/akmain?code=%s&type=%s'
PAGE_TYPE = {'http':'http://','ftp':'ftp://'}
PAGE_DOMAIN = {'sina':'sina.com.cn','ifeng':'ifeng.com'}
URL_ERROR_MSG = '获取失败，亲，请检查网络状态，或API端口URL已经不匹配！'

pu = Utils.PyUtils()
pyconn = None

STOCK_LIST_URL = "http://quote.eastmoney.com/stocklist.html"
STOCK_INFO_URL = "https://gupiao.baidu.com/stock/"


class StockHist:
    def __init__(self):
        pass

    def CodeToAPICode(self,code):
        """
        功能说明：
            验证输入的股票代码时候正确，若正确则返回API对应使用的股票代码
        """
        if code in INDEX_KEY:
            return INDEX_LIST[code]
        else:
            if len(code) == 6:
                return 'sh%s'%code if code[:1] in ['5','6'] else 'sz%s'%code
            elif re.match(r"[s][hz]\d{6}",code) != None:
                return code
            else:
                raise IOError('Stock code input error!')
            
    
    def GetUrl(self,ktype,code):
        """
        功能说明：
            验证输入的K线类型时候正确，若正确则返回URL
        """
        if ktype in K_TYPE_KEY:
            return DAY_PRICE_URL % (PAGE_TYPE['http'],PAGE_DOMAIN['ifeng'],K_TYPE[ktype],code)
        elif ktype in K_TYPE_MAIN_KEY:
            return MAIN_PRICE_URL % (PAGE_TYPE['http'],PAGE_DOMAIN['ifeng'],K_TYPE[ktype],code)
        else:
            raise IOError('ktype input error!')

    def ReqAPI(self,url):
        """
        功能说明：
            向API发送数据请求，若链接正常则返回数据
        """
        text = ''
        try:
            req = Request(url)
            text = urlopen(req,timeout=10).read()
            if len(text) < 15:
                raise IOError('No Data!')
            else:
                return text
        except Exception as e:
            print(e)
        
    #根据股票代码获取该股历史交易数据
    def GetHistDataList(self,scode = None ,ktype = 'D'):
        """
        功能说明：
            获取个股历史交易数据
        --------------------------------------------------------------------------------
        输入：
            code : string
            股票代码 比如：601989
            start : string
            开始日期 格式:YYYY-MM-DD 为空时取到API所提供的最早日期数据
            end : string
            结束日期 格式:YYYY-MM-DD 为空时取到最近一个交易日数据    
            ktype : string (default = D ,函数内部自动统一为大写)
            数据类型 D=日K线，W=月K线，5=5分钟，15=15分钟，30=30分钟，60=6-分钟
        --------------------------------------------------------------------------------
        输出：
            DataFrame
            date        日期
            open        开盘价
            high        最高价
            close        收盘价
            low            最低价
            volume        成交量
            chg            涨跌额
            %chg        涨跌幅
            ma5            5日均价
            ma10        10日均价
            ma20        20日均价
            vma5        5日均量
            vma10        10日均量
            vma20        20日均量
            turnover    换手率（指数无此项）
        --------------------------------------------------------------------------------
        """
        scode = self.CodeToAPICode(scode.upper())
        #将ktype转化为大写，若为数字则不改变
        ktype = ktype.upper()
        url = self.GetUrl(ktype,scode)
#         sjs = '''
#         {"record":[["2017-11-27","10.010","12.010","12.010","10.010","89.86","3.670","44.01","12.010","12.010","12.010","89.86","89.86","89.86","0.04"],["2017-11-28","13.210","13.210","13.210","13.210","30.56","1.200","9.99","12.610","12.610","12.610","60.21","60.21","60.21","0.01"],["2017-11-29","14.530","14.530","14.530","14.530","34.86","1.320","9.99","13.250","13.250","13.250","51.76","51.76","51.76","0.01"],["2017-11-30","15.980","15.980","15.980","15.980","50.85","1.450","9.98","13.933","13.933","13.933","51.53","51.53","51.53","0.02"],["2017-12-01","17.580","17.580","17.580","17.580","59.72","1.600","10.01","14.662","14.662","14.662","53.17","53.17","53.17","0.02"],["2017-12-04","19.340","19.340","19.340","19.340","386.18","1.760","10.01","16.128","15.442","15.442","112.43","108.67","108.67","0.16"],["2017-12-05","21.270","21.270","21.270","21.270","1320.95","1.930","9.98","17.740","16.274","16.274","370.51","281.85","281.85","0.54"],["2017-12-06","23.400","23.400","23.400","23.400","837.26","2.130","10.01","19.514","17.165","17.165","530.99","351.28","351.28","0.34"],["2017-12-07","25.740","25.740","25.740","25.740","564.97","2.340","10.00","21.466","18.118","18.118","633.82","375.02","375.02","0.23"],["2017-12-08","28.310","28.310","28.310","28.310","6290.10","2.570","9.98","23.612","19.137","19.137","1,879.89","966.53","966.53","2.58"],["2017-12-11","31.140","31.140","31.140","30.010","60298.98","2.830","10.00","25.972","21.050","20.228","13,862.45","6,987.44","6,360.39","24.71"],["2017-12-12","31.150","33.650","32.040","30.300","179780.08","0.900","2.89","28.126","22.933","21.213","49,554.28","24,962.40","20,812.03","73.68"],["2017-12-13","28.940","29.970","29.380","28.840","140265.67","-2.660","-8.30","29.322","24.418","21.841","77,439.96","38,985.48","30,000.77","57.49"],["2017-12-14","29.200","32.320","32.320","28.550","137309.17","2.940","10.01","30.638","26.052","22.589","104,788.80","52,711.31","37,665.66","56.27"],["2017-12-15","32.990","33.380","29.090","29.090","152256.02","-3.230","-9.99","30.794","27.203","23.023","133,981.98","67,930.94","45,305.02","62.40"],["2017-12-18","27.280","27.600","26.180","26.180","99385.13","-2.910","-10.00","29.802","27.887","23.220","141,799.21","77,830.83","48,685.02","40.73"],["2017-12-19","25.660","26.560","25.800","25.310","69527.73","-0.380","-1.45","28.554","28.340","23.372","119,748.74","84,651.51","49,911.06","28.49"],["2017-12-20","25.900","26.530","24.950","24.720","69353.15","-0.850","-3.29","27.668","28.495","23.459","105,566.24","91,503.10","50,991.18","28.42"],["2017-12-21","24.500","25.850","25.300","24.060","73735.80","0.350","1.40","26.264","28.451","23.556","92,851.57","98,820.18","52,188.27","30.22"]]}
        return json.loads(self.ReqAPI(url))['record']
    
    
    def GetHistData(self,code = None ,start = None, end = None, ktype = 'D'):
        """
        功能说明：
            获取个股历史交易数据
        --------------------------------------------------------------------------------
        输入：
            code : string
            股票代码 比如：601989
            start : string
            开始日期 格式:YYYY-MM-DD 为空时取到API所提供的最早日期数据
            end : string
            结束日期 格式:YYYY-MM-DD 为空时取到最近一个交易日数据    
            ktype : string (default = D ,函数内部自动统一为大写)
            数据类型 D=日K线，W=月K线，5=5分钟，15=15分钟，30=30分钟，60=6-分钟
        --------------------------------------------------------------------------------
        输出：
            DataFrame
            date        日期
            open        开盘价
            high        最高价
            close        收盘价
            low            最低价
            volume        成交量
            chg            涨跌额
            %chg        涨跌幅
            ma5            5日均价
            ma10        10日均价
            ma20        20日均价
            vma5        5日均量
            vma10        10日均量
            vma20        20日均量
            turnover    换手率（指数无此项）
        --------------------------------------------------------------------------------
        """
        code = self.CodeToAPICode(code.upper())
        #将ktype转化为大写，若为数字则不改变
        ktype = ktype.upper()

        url = self.GetUrl(ktype,code)
        
        sjs = '''
        {"record":[["2017-11-27","10.010","12.010","12.010","10.010","89.86","3.670","44.01","12.010","12.010","12.010","89.86","89.86","89.86","0.04"],["2017-11-28","13.210","13.210","13.210","13.210","30.56","1.200","9.99","12.610","12.610","12.610","60.21","60.21","60.21","0.01"],["2017-11-29","14.530","14.530","14.530","14.530","34.86","1.320","9.99","13.250","13.250","13.250","51.76","51.76","51.76","0.01"],["2017-11-30","15.980","15.980","15.980","15.980","50.85","1.450","9.98","13.933","13.933","13.933","51.53","51.53","51.53","0.02"],["2017-12-01","17.580","17.580","17.580","17.580","59.72","1.600","10.01","14.662","14.662","14.662","53.17","53.17","53.17","0.02"],["2017-12-04","19.340","19.340","19.340","19.340","386.18","1.760","10.01","16.128","15.442","15.442","112.43","108.67","108.67","0.16"],["2017-12-05","21.270","21.270","21.270","21.270","1320.95","1.930","9.98","17.740","16.274","16.274","370.51","281.85","281.85","0.54"],["2017-12-06","23.400","23.400","23.400","23.400","837.26","2.130","10.01","19.514","17.165","17.165","530.99","351.28","351.28","0.34"],["2017-12-07","25.740","25.740","25.740","25.740","564.97","2.340","10.00","21.466","18.118","18.118","633.82","375.02","375.02","0.23"],["2017-12-08","28.310","28.310","28.310","28.310","6290.10","2.570","9.98","23.612","19.137","19.137","1,879.89","966.53","966.53","2.58"],["2017-12-11","31.140","31.140","31.140","30.010","60298.98","2.830","10.00","25.972","21.050","20.228","13,862.45","6,987.44","6,360.39","24.71"],["2017-12-12","31.150","33.650","32.040","30.300","179780.08","0.900","2.89","28.126","22.933","21.213","49,554.28","24,962.40","20,812.03","73.68"],["2017-12-13","28.940","29.970","29.380","28.840","140265.67","-2.660","-8.30","29.322","24.418","21.841","77,439.96","38,985.48","30,000.77","57.49"],["2017-12-14","29.200","32.320","32.320","28.550","137309.17","2.940","10.01","30.638","26.052","22.589","104,788.80","52,711.31","37,665.66","56.27"],["2017-12-15","32.990","33.380","29.090","29.090","152256.02","-3.230","-9.99","30.794","27.203","23.023","133,981.98","67,930.94","45,305.02","62.40"],["2017-12-18","27.280","27.600","26.180","26.180","99385.13","-2.910","-10.00","29.802","27.887","23.220","141,799.21","77,830.83","48,685.02","40.73"],["2017-12-19","25.660","26.560","25.800","25.310","69527.73","-0.380","-1.45","28.554","28.340","23.372","119,748.74","84,651.51","49,911.06","28.49"],["2017-12-20","25.900","26.530","24.950","24.720","69353.15","-0.850","-3.29","27.668","28.495","23.459","105,566.24","91,503.10","50,991.18","28.42"],["2017-12-21","24.500","25.850","25.300","24.060","73735.80","0.350","1.40","26.264","28.451","23.556","92,851.57","98,820.18","52,188.27","30.22"]]}
        '''
#         js = json.loads(self.ReqAPI(url))
        js = json.loads(sjs)
        cols = []

        #如果只有14个数据列，则为指数的历史数据
        if len(js['record'][0]) == 14:
            cols = INDEX_DAY_PRICE_COLS
        else:
            cols = DAY_PRICE_COLS
        
        #打印json中的第0行查看数据格式
        #print(str(js['record'][0]))
        slist = js['record']
        print len(slist)

        df = pd.DataFrame(js['record'],columns=cols)
        #查看DF的数据
        #print(str(df))

        #遍历DataFrame，将df中每千位数字的‘,’分隔符删除
        if ktype in K_TYPE_KEY:
            df = df.applymap(lambda x:x.replace(u',',u''))
        #print(str(df))

        for col in cols[1:]:
            df[col] = df[col].astype(float)
        if start is not None:
            df = df[df.date >= start]
        if end is not None:
            df = df[df.date <= end]
        #将date列设置为索引值
        df = df.set_index('date')
        #将筛选出的数据打印到文件
        f = open('/media/monking/DATA/DATUM/stock_hist.data','a')
        f.write(str(df))
        f.close()
        return df
    

def RecordCount(pyconn , tname , colname , colval):
    return pyconn.GetBySqlRetUnique("select count(*) from %s where %s = '%s'" % (tname,colname,colval))



#获取/跟新股票代码列表
def UpdateStockList(stockURL):
    html = pu.GetHtmlText(stockURL)
#     f = open("/media/monking/DATA/DATUM/stock_hist.data","r")
#     html = f.read()
#     f.close()
    for  tag in BeautifulSoup(html,"html.parser").find_all("a"):
        try:
            codeinfo = tag.get_text()
            stockCode = re.findall(r'\d{6}',codeinfo)[0]
            if stockCode != None:
                stockName = codeinfo.split('(')[0]
                if len(stockName) > 8:
                    continue
                if (RecordCount(pyconn,"scodeinfo","scode",stockCode) <= 0):
                    sqlstr = "insert into scodeinfo(scode , sname) values('%s','%s');" % (stockCode,stockName)
                    pyconn.SetBySql(sqlstr.encode("UTF8"))
        except:
            continue

#将个股历史数据存入数据库        
def UpdateStockData(pyconn , scode = '300727'):
    skh = StockHist()
    sdlist = skh.GetHistDataList(scode)
    for sd in sdlist:
        turnover = 0.0
        for i in range(len(sd)):
            sd[i] = sd[i].replace(u',',u'')
        if len(sd) == 15:
            turnover = float(sd[14])
        sqlstr = "insert into sdata (scode,date,open,high,close,low,volume,chg,chg_,ma_five,ma_ten,ma_twenty,vma_five,vma_ten,vma_twenty,turnover) values('%s','%s',%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f)" % (scode,sd[0],float(sd[1]),float(sd[2]),float(sd[3]),float(sd[4]),float(sd[5]),float(sd[6]),float(sd[7]),float(sd[8]),float(sd[9]),float(sd[10]),float(sd[11]),float(sd[12]),float(sd[13]),turnover)
        pyconn.SetBySql(sqlstr)

def GetStockList(pyconn):
    sqlstr = "select scode from scodeinfo"
    scodelist = pyconn.GetBySql(sqlstr)
    return scodelist

            

if __name__ == '__main__':
    '''
    pyconn = Utils.MySqlDB('118.89.62.73','root' , '810417monking765','stock' , 3306)
    scodelist = []
    for record in list(GetStockList(pyconn)):
        scodelist.append(record[0])
    '''
#         UpdateStockData(pyconn, record[0])
    #UpdateStockList(STOCK_LIST_URL)
#     UpdateStockData(pyconn)